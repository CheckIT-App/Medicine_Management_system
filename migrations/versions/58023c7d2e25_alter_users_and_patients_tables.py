"""Alter users and patients tables

Revision ID: 58023c7d2e25
Revises: 
Create Date: 2024-12-01 12:40:09.739833

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '58023c7d2e25'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade():
    # Drop table only if it exists
    with op.get_context().autocommit_block():
        op.execute("DROP TABLE IF EXISTS medicine_size_codes CASCADE;")
        op.execute("DROP TABLE IF EXISTS users CASCADE;")
        op.execute("DROP TABLE IF EXISTS actions CASCADE;")
        op.execute("DROP TABLE IF EXISTS medicine_instances CASCADE;")
        op.execute("DROP TABLE IF EXISTS prescription_items CASCADE;")
        op.execute("DROP TABLE IF EXISTS inventory_logs CASCADE;")
        op.execute("DROP TABLE IF EXISTS medicine_types CASCADE;")
        op.execute("DROP TABLE IF EXISTS role_codes CASCADE;")
        op.execute("DROP TABLE IF EXISTS gender_codes CASCADE;")
        op.execute("DROP TABLE IF EXISTS patients CASCADE;")
        op.execute("DROP TABLE IF EXISTS medicines CASCADE;")
        op.execute("DROP TABLE IF EXISTS prescriptions CASCADE;")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('prescriptions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('prescriptions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('prescribed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], name='prescriptions_patient_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prescribed_by'], ['users.id'], name='prescriptions_prescribed_by_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='prescriptions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('medicines',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('stock_quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='medicines_pkey')
    )
    op.create_table('patients',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('patients_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('contact_info', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('gender_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['gender_id'], ['gender_codes.id'], name='fk_gender_id'),
    sa.PrimaryKeyConstraint('id', name='patients_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('gender_codes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('gender_codes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='gender_codes_pkey'),
    sa.UniqueConstraint('name', name='gender_codes_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('role_codes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('role_codes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='role_codes_pkey'),
    sa.UniqueConstraint('name', name='role_codes_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('medicine_types',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('medicine_types_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('barcode', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('x', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('y', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('size_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['size_id'], ['medicine_size_codes.id'], name='fk_size_id'),
    sa.PrimaryKeyConstraint('id', name='medicine_types_pkey'),
    sa.UniqueConstraint('barcode', name='medicine_types_barcode_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('inventory_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('medicine_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('quantity_change', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('performed_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('medicine_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['medicine_id'], ['medicine_types.id'], name='fk_inventory_logs_medicine_type', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['medicine_type_id'], ['medicine_types.id'], name='inventory_logs_medicine_type_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['performed_by'], ['users.id'], name='inventory_logs_performed_by_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='inventory_logs_pkey')
    )
    op.create_table('prescription_items',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('prescription_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('medicine_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['medicine_id'], ['medicine_types.id'], name='fk_prescription_items_medicine_type', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prescription_id'], ['prescriptions.id'], name='prescription_items_prescription_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='prescription_items_pkey')
    )
    op.create_table('medicine_instances',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('medicine_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('batch_number', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('expiration_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['medicine_type_id'], ['medicine_types.id'], name='medicine_instances_medicine_type_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='medicine_instances_pkey')
    )
    op.create_table('actions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('action_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='actions_user_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='actions_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role_codes.id'], name='fk_role_id'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key')
    )
    op.create_table('medicine_size_codes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='medicine_size_codes_pkey'),
    sa.UniqueConstraint('name', name='medicine_size_codes_name_key')
    )
    # ### end Alembic commands ###
